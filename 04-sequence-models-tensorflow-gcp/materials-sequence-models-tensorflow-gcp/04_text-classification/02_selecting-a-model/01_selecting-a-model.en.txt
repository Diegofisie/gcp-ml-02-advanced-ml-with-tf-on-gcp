As you saw, preprocessing is a bit of work but now, we have a meaningful numeric representation of our text that we can feed into our model. Speaking of which, what type of model should we use? You may be tempted to jump to RNN but remember that RNNs can be tricky to tune and usually aren't the best idea to start with. For sequential text classification, CNNs have actually been shown to produce really good results. In image classification, we use CNNs to analyze groups of adjacent pixels. Here, we will use CNNs to analyze groups of adjacent words. Our CNN model will be able to learn the phrase Supreme Court in addition to just the individual words Supreme and Court. In image classification, each pixel was represented by three features: the red channel, the blue channel, and the green channel. In text classification, each word will be represented by the number of dimensions in our embedding space which itself is a hyperparameter. In the diagram, the number of dimensions is eight but our model, we'll use 200. We'll build our TensorFlow model using the Keras API. We first introduced Keras at the end of the last specialization. As reminder, Keras is a high-level API for rapid prototyping deep learning models. It has a simple modular interface that is friendly and it's quickly becoming the preferred way to build models in TensorFlow. On the left of the screen are the Keras layers we'll be using and on the right is a schematic that shows the input and output dimensions. I encourage you to pause the video, take a look at the dimensions and see if you can figure out what each dimension means and how it's changing. We won't go over the model in detail here but I'll elaborate on it during the lab walkthrough. One last piece before we start the lab. While Keras is a great way to do rapid prototyping, it doesn't support distributed training. Luckily, there's a simple way to convert a Keras model into an estimator so you can have the best of both worlds: user-friendly APIs and distributed training. Simply use the keras.estimator.model_to_estimator function which takes in a compiled Keras model and returns an estimator.