1
00:00:00,000 --> 00:00:04,710
As you saw, preprocessing is a bit of work but now,

2
00:00:04,710 --> 00:00:10,115
we have a meaningful numeric representation of our text that we can feed into our model.

3
00:00:10,115 --> 00:00:14,195
Speaking of which, what type of model should we use?

4
00:00:14,195 --> 00:00:18,000
You may be tempted to jump to RNN but remember that

5
00:00:18,000 --> 00:00:22,615
RNNs can be tricky to tune and usually aren't the best idea to start with.

6
00:00:22,615 --> 00:00:25,300
For sequential text classification,

7
00:00:25,300 --> 00:00:29,490
CNNs have actually been shown to produce really good results.

8
00:00:29,490 --> 00:00:35,920
In image classification, we use CNNs to analyze groups of adjacent pixels.

9
00:00:35,920 --> 00:00:40,925
Here, we will use CNNs to analyze groups of adjacent words.

10
00:00:40,925 --> 00:00:44,269
Our CNN model will be able to learn the phrase

11
00:00:44,269 --> 00:00:50,575
Supreme Court in addition to just the individual words Supreme and Court.

12
00:00:50,575 --> 00:00:57,420
In image classification, each pixel was represented by three features: the red channel,

13
00:00:57,420 --> 00:01:00,070
the blue channel, and the green channel.

14
00:01:00,070 --> 00:01:04,790
In text classification, each word will be represented by the number

15
00:01:04,790 --> 00:01:09,725
of dimensions in our embedding space which itself is a hyperparameter.

16
00:01:09,725 --> 00:01:15,885
In the diagram, the number of dimensions is eight but our model, we'll use 200.

17
00:01:15,885 --> 00:01:20,300
We'll build our TensorFlow model using the Keras API.

18
00:01:20,300 --> 00:01:24,730
We first introduced Keras at the end of the last specialization.

19
00:01:24,730 --> 00:01:31,120
As reminder, Keras is a high-level API for rapid prototyping deep learning models.

20
00:01:31,120 --> 00:01:34,340
It has a simple modular interface that is

21
00:01:34,340 --> 00:01:39,680
friendly and it's quickly becoming the preferred way to build models in TensorFlow.

22
00:01:39,680 --> 00:01:44,180
On the left of the screen are the Keras layers we'll be using and

23
00:01:44,180 --> 00:01:48,395
on the right is a schematic that shows the input and output dimensions.

24
00:01:48,395 --> 00:01:50,780
I encourage you to pause the video,

25
00:01:50,780 --> 00:01:53,450
take a look at the dimensions and see if you can figure

26
00:01:53,450 --> 00:01:57,070
out what each dimension means and how it's changing.

27
00:01:57,070 --> 00:02:00,080
We won't go over the model in detail here

28
00:02:00,080 --> 00:02:03,880
but I'll elaborate on it during the lab walkthrough.

29
00:02:03,890 --> 00:02:07,190
One last piece before we start the lab.

30
00:02:07,190 --> 00:02:10,590
While Keras is a great way to do rapid prototyping,

31
00:02:10,590 --> 00:02:13,335
it doesn't support distributed training.

32
00:02:13,335 --> 00:02:17,430
Luckily, there's a simple way to convert a Keras model into

33
00:02:17,430 --> 00:02:19,550
an estimator so you can have the best of

34
00:02:19,550 --> 00:02:23,755
both worlds: user-friendly APIs and distributed training.

35
00:02:23,755 --> 00:02:27,905
Simply use the keras.estimator.model_to_estimator

36
00:02:27,905 --> 00:02:34,000
function which takes in a compiled Keras model and returns an estimator.