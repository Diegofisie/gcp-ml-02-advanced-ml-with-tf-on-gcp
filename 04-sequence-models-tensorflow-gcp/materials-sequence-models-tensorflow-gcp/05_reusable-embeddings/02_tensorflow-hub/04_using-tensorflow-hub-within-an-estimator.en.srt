1
00:00:00,000 --> 00:00:03,720
So now you've seen how to use TensorFlow Hub to create embeddings

2
00:00:03,720 --> 00:00:07,725
and to assess the quality of those embeddings using a semantic evaluation.

3
00:00:07,725 --> 00:00:09,815
Assuming they met your criteria,

4
00:00:09,815 --> 00:00:12,300
the next step would be incorporating the embeddings into

5
00:00:12,300 --> 00:00:15,370
your model and that's also really easy to do.

6
00:00:15,370 --> 00:00:19,255
The TensorFlow Hub API has two functions; text embedding column,

7
00:00:19,255 --> 00:00:21,600
and image embedding column and these allow you to

8
00:00:21,600 --> 00:00:25,065
easily use the pre-trained models as input to yours.

9
00:00:25,065 --> 00:00:27,300
Here's an example of how to use a text

10
00:00:27,300 --> 00:00:29,795
embedding column as an input to a canned estimator,

11
00:00:29,795 --> 00:00:32,145
in this case DNN classifier.

12
00:00:32,145 --> 00:00:35,605
It's as simple as including it in the feature columns list.

13
00:00:35,605 --> 00:00:39,830
Note how we specify the value of key as "sentence".

14
00:00:39,830 --> 00:00:43,670
This is so that your input function which recall will return a dictionary

15
00:00:43,670 --> 00:00:48,335
mapping keys to tensors will know which input to map to your embedding column.

16
00:00:48,335 --> 00:00:51,435
Note how we've set the trainable parameter.

17
00:00:51,435 --> 00:00:56,425
Setting the trainable parameter to false freezes the pre-trained models parameters.

18
00:00:56,425 --> 00:01:01,070
Unfreezing it is simple as changing it to true, and there you have it.

19
00:01:01,070 --> 00:01:05,000
You've seen how to create embeddings of words with rich semantic properties either from

20
00:01:05,000 --> 00:01:09,545
scratch or from a library of easy to use modules on TensorFlow Hub.

21
00:01:09,545 --> 00:01:12,560
Are you curious to learn more about how to create a character

22
00:01:12,560 --> 00:01:15,625
ad-on like the one that we used to generate Shakespeare?

23
00:01:15,625 --> 00:01:17,690
That's coming up in the next module.