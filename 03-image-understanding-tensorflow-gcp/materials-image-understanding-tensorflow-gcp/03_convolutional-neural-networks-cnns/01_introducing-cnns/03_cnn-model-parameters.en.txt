Why the input and output sizes different? Why is the input of a 300 by 300 image, but each filter output is only 296 by 296? If you said, this was because of the pixels at the edge of the image for which there are no valid neighbors to compute the full convolution, then you're correct. The larger the size of the kernel, the smaller the output of the convolution operation. Since this makes sequences of convolutional layers more difficult to analyze and to use. Next, you will look at a way to avoid this problem. The diagram illustrates an approach called padding, to help you maintain the same size across the input and the output of the convolutional layer. The approach as an outer border, shown here in white, around the input values in green. The values in the border, are commonly said to be zeros, but it's also possible to use another value. The thickness of the border depends on the size of the kernel. If you're using square kernels and the size of the kernel side is an odd number, just take the length of the kernel side, subtract one, and then divide that in half. You will get the required thickness of the border to preserve the shape of the input. Keep in mind, that unless you're building your own implementation of the convolutional layer, you won't have to do these calculations yourself. Most machine learning frameworks, like TensorFlow, provide built-in support for padding. A convolutional layer is just another layer available in the TensorFlow library. When creating a CNN, simply call the tf layer conv2d method, passing the input from the previous layer. For example, if you're creating a CNN to recognize MNIST digits, the input parameter will have the filter height and width of 28, with a value of one for the in-channels dimension, because MNIST uses a single gray scale channel. When designing a CNN, you have to decide on the number of output channels, which is based on your choice for the number of filters. Finally, you need to pick a kernel size that's used across all filters. Common sizes include; three by three, five by five and seven by seven. Recent research has shown that it's better to use smaller kernel sizes and add more convolutional layers. In other words, instead of using a nine by nine filter, try sequencing two layers of three by three filters. The final required option is for padding. There are two padding methods available in TensorFlow, one is called same and the other is called valid. The nuances of the differences between them, have to do with what happens to pixels that are on the very edges of the image, and that are leftover when the image size is not exactly divisible by the kernel size. In general, when you use small square and odd-numbered sizes for the kernels, the differences are not very meaningful. Just go with same. Other key parameters to the conv2d method includes, stride and the activation function, usually, the royal function. As you recall from the animation that illustrated the convolution operation, the kernel was moving across the image one pixel at a time. It is possible to change this behavior using the stride parameter in the conv2d function. As shown in the graphic, steadying stride to two, will force the kernel to move two pixels to the right, after processing the image pixels in the upper left. Here, the stride is both vertical and horizontal. So, after processing all the pixels in the top three rows, the kernel will also move two rows down. Increasing the stride, requires the computation required to process the input data. However, setting the parameter too high, means the some data might be ignored by the neural network. In most CNN architectures, stride is set to be equal to, or smaller than the size of the kernel. You also need to remember that using a stride with a value greater than one, will reduce the shape produced by your convolutional layer. The size of the output will be divided along every dimension by the size of your stride step. For example, if you're processing a 28 by 28 image, and the stride as two, the output will have a shape of 14 by 14. What does the green part of the below diagram represent? The kernel, the filter output, the original image? The answer is the original image. What does the yellow part of the below diagram represent? The kernel convolving, the filter output, the original image? The answer is, the kernel convolving of the image. What is the size of the stride step in the below diagram? Is it a stride of three, stride of two, stride of one, or is stride unknown? The answer is stride of one.