1
00:00:00,000 --> 00:00:03,575
Hi, welcome back to the production ML systems course.

2
00:00:03,575 --> 00:00:05,760
This is the second module in the course and we'll

3
00:00:05,760 --> 00:00:07,920
be covering what architectures are composed of,

4
00:00:07,920 --> 00:00:10,950
why and how to make good systems design decisions.

5
00:00:10,950 --> 00:00:14,065
We're going to begin today in a untypical way with a quiz.

6
00:00:14,065 --> 00:00:17,255
What percent of system code does the ML model accounts for?

7
00:00:17,255 --> 00:00:19,400
Five percent? Twenty five percent?

8
00:00:19,400 --> 00:00:21,720
Fifty percent or ninety percent?

9
00:00:21,720 --> 00:00:25,530
Recall that in the earlier specialization we talked about how time is

10
00:00:25,530 --> 00:00:29,465
distributed among data wrangling and feature engineering and other tasks.

11
00:00:29,465 --> 00:00:33,880
Surprisingly, modeling accounted for far less than most people expect.

12
00:00:33,880 --> 00:00:37,080
A similar relationship holds with respect to the code.

13
00:00:37,080 --> 00:00:41,809
ML model code typically accounts for about five percent of the overall codebase.

14
00:00:41,809 --> 00:00:43,550
The reason that ML models account for

15
00:00:43,550 --> 00:00:46,460
such a small percentage is that to keep the system running in production,

16
00:00:46,460 --> 00:00:51,225
it requires a lot more than just computing the model's outputs for a given set of inputs.

17
00:00:51,225 --> 00:00:53,540
In this module, we'll talk about what else

18
00:00:53,540 --> 00:00:56,900
the production ML system needs to do and how you can meet those needs.

19
00:00:56,900 --> 00:01:00,725
We'll then review some important high-level decisions around training

20
00:01:00,725 --> 00:01:02,690
and model serving that you'll need to make in

21
00:01:02,690 --> 00:01:05,390
order to get the right performance profile for your model.

22
00:01:05,390 --> 00:01:07,040
By the end of this module,

23
00:01:07,040 --> 00:01:10,490
you should be able to choose the appropriate training and serving per paradigm.

24
00:01:10,490 --> 00:01:14,500
Serve ML model scalably and design and architecture from scratch.

25
00:01:14,500 --> 00:01:18,205
So, what are the components that make up the other 95 percent of system code?

26
00:01:18,205 --> 00:01:21,890
There are quite a few. In this first section we're going to go through them one by one.

27
00:01:21,890 --> 00:01:24,530
For every component, we'll talk about what it does,

28
00:01:24,530 --> 00:01:26,270
why that function is important for the system

29
00:01:26,270 --> 00:01:29,785
overall and how GCP products align to these components.

30
00:01:29,785 --> 00:01:32,124
But even though we're talking about GCP,

31
00:01:32,124 --> 00:01:35,150
you should always try and reuse generic systems where you can.

32
00:01:35,150 --> 00:01:38,680
There are lots of good reusable often open-source frameworks,

33
00:01:38,680 --> 00:01:40,375
so don't reinvent the wheel.

34
00:01:40,375 --> 00:01:43,880
Additionally, what's true of software frameworks like TensorFlow,

35
00:01:43,880 --> 00:01:46,280
Spark or Apache Beam is also true

36
00:01:46,280 --> 00:01:49,255
of the underlying infrastructure on which you execute them.

37
00:01:49,255 --> 00:01:52,880
Rather than spend time and effort provisioning infrastructure,

38
00:01:52,880 --> 00:01:55,220
use managed services like Cloud Dataproc,

39
00:01:55,220 --> 00:01:58,350
Cloud ML Engine or Cloud Dataflow to execute your Spark,

40
00:01:58,350 --> 00:02:00,740
TensorFlow, and Beam code.