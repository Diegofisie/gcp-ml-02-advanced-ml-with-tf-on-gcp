Just like the other two types of context-aware algorithms, contextual modeling begins with our user, by item, by multidimensional context tensor, containing ratings. This data goes directly to our recommender. But notice, this is not our traditional two-dimensional recommender system, but an M-dimensional one where context is a part of our model. Contexts is that explicit predictor, along with a usual user item relationship. These multidimensional recommendation functions, can be represented by heuristics or predictive model based approaches, such as decision trees, regression models or probabilistic models. We then can apply our user vector to our multidimensional recommendations, during the representation in multidimensional embedding space. Then we apply our context vector to our multidimensional recommendations, giving us finally our contextual recommendations for our user. Contextual modeling, has many different algorithms to learn multidimensional models of contextual user item interactions. Factorization became very popular and has led to many methods over the years. Let's take a deeper look at deviation-based context-aware matrix factorization. In deviation-base context-aware matrix factorization, we want to know how a user's rating is deviated across contexts. This difference is called the contextual rating deviation, or CRD. It looks at the deviations of users across contexts dimensions. Let's look at a quick example. Here is an example of some of our contextual data for movies. Here we have essentially groups by all the unique contexts, which in this example, we have eight of, with three-dimensions each: location, time, and who the user watched the movie with. Let's only look at two contexts to keep things simpler. We can calculate the contextual rating deviation or CRD, for each of these contexts dimensions. The CRD for location is 0.8, which mean that users ratings and location dimension, are generally 0.8 higher for theatre than home. The CRD for time is a negative 0.2, which means that user's ratings in the time dimension, are generally 0.2 lower for weekday than weekend. The CRD for who the user watched the movie width is 0.1, which is generally 0.1 higher for friend than for family. So, how do we use the contextual rating deviation to adjusting predictions? In traditional recommendation systems, we find in our ratings, we can use standard matrix factorization or we can use bias matrix factorization. Where we add a term for the global average rating, a bias term for user u, and a bias term for item i. Of course, we have our user item interaction term, which is the dot product of the users vector p, from the user factor embedding matrix u, and the items factor vector q, from the item factor embedding matrix v. As we can see, context is completely missing from our rating predictions. Instead of using the previous equation, we can use the context-aware matrix factorization context approach. We can see, that almost everything is the same, except for two terms. On the right-hand side, we have added the contextual rating deviations, summed across contexts. This gives us contextual multidimensional ratings on the left-hand side. Yet, this isn't the only deviation based context-aware matrix factorization approach. Let's see some others. There also the context user and contexts item approaches. In the context user approach, we've absorbed the user bias term into our CRD function, which is now dependent on both contexts and user. In the context item approach, we absorbed the item bias term into our CRD function, which is now dependent on both contexts and item. Which approach works best out of the three? It all really depends on your problem, data, etc. So, please, experiment and try them all. Now that we've learned about the three main types of context-aware recommendation system algorithms, let's test your knowledge. Which context-aware recommendation system type produces non-contractual recommendations that at later adjusts via context into contextual recommendations? Contextual modeling, contextual postprocessing, contextual prefiltering, contextual adjustment, contextual postfiltering, contextual aggregation or none of the above. The correct answer is E. Contextual postfiltering begins with our user item multidimensional context tensor, it then completely ignores context and sends the data through a traditional two-dimensional user item recommendation system which produces non contextual recommendations. We then use the targeted contexts to adjust the recommendations as we saw with the filter and weight methods, to finally arrive at the contextual recommendations. Contextual modeling actually uses an M-dimensional recomender that uses contexts as an explicit predictor in a prediction model, or via heuristics outputting in multidimensional recommendations. Contextual prefiltering as the name suggest, first filters the user item context data set by context or a generalized context, to reduce the original tensor to a subset of just user item interactions, that we can use in our traditional two-dimensional recommendation system. The other answers we didn't cover, and were just made up but they sound cool.