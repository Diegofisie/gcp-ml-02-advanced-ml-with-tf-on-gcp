Now it's our turn. In this lab, we're going to design a hybrid recommendation system to recommend movies to users. We'll come up with some useful data sets, that we think are important to collect. There are many ways to connect things together, so experimentation will help find one of the better combinations. In this lab, we want to have a fun thought experiment on how we can best recommend movies to users by using a hybrid recommendation system. Think of several data sets that would be useful for each recommendation system type, content-based, collaborative filtering, and knowledge-based. Remember, there are both structured and unstructured data sources we can use from our website, as well as both explicit and implicit types of feedback. First, we're going to look at what data sets would be important to best recommend movies to users, for content-based recommendation models. Think about what type of data would be available on a movies page or on its website. Remember, it can be both structured and unstructured, also it's content-base. So, it shouldn't really involve the users, but should be from experts with domain knowledge about the item. So now, take a moment and think, right down or discuss with your colleagues what data sets we could use for content-based recommendations, and then, we'll go through some of the ones we came up with. All right. Let's see some of the ideas we came up with. A simple structured piece of data on a movies page could be the genre of the movie. Note, that there could be multiple genres labeled per movie, so you might create an nha encoded for each genre per movie. Users often enjoy specific genres, therefore if we know the ones that they like, we can recommend more of that type. Because this is content-based, we're going to be making safe genre recommendations, because we're basing them on each user's personal genre bubble and embedding a space, and therefore, probably want to explore outside of it. Collaborative filtering will help make up for that by looking across other users too. We could also extract the theme of the movie, and just like with genre, there could be more than one, so we should nha encode these too. Maybe people think genres and themes are the same thing or at least they're related, but the cross between the two does create some nodes with differentiation. Perhaps a user like Sci-Fi and also likes the hero journey, the underdog good guys triumph over the empower bad guys, and hope themes. Now, all sci-fi movies have those themes and those themes exist in other genres outside of sci-fi, therefore, it can help provide another layer of insight into what other movies recommend. Also, just as with genres, because this is content-based, recommendations probably won't be far outside user's thematic comfort zones. Another type of structured data we could use is the actors and directors involved. This also could be nha encoded for each actor and director that attached the movie. Many people have favorite actors and directors and specifically choose movies based on that, due to their personality, style, et cetera. For instance, maybe a user watches movies all with the same actor in them, but train many varied roles across multiple genres. There's a good likelihood that other movies of that star, that actor would also be enjoyed by the user. Because this is content-based, there won't be many movies recommended that don't have their favorite people in it. But fortunately because most movies have an ensemble of talent, at least the user will be exposed to them too and might find they like or dislike some other people as well, while they watch. We could have also come up with the idea to tap in professional ratings from critics and paid reviewers. But wait, just one moment. Aren't ratings supposed to be for collaborative filtering? Well, yes, but those are ratings from users interacting with the items. So, we can use both the similarity between users and items to find the best recommendations. In this case, however, these professionals are not users, or at least they aren't posting from their personal user accounts, and probably have a separate professional opinion area that they enter their ratings in. It is interesting to think about how these can be used. Perhaps a user usually likes movies that the critics rate highly, whereas other users might actually enjoy movies that get low ratings from the mainstream critics, and everything in between. Because this is content-based, you will likely just get more of the same professional ratings-wise at least. There's also a massive amount of unstructured data that we could use from the movie web page. One example could be taking the movie description, synopsis, and full plot summary and performing natural language processing on it, to develop a meaningful embedding. This could get it somewhat more than nuance of what people enjoy about a movie, in addition to box and labels such as genre and theme. If all the movies a user has watched contain a bunch of references to car chases in the plot summary, they probably enjoy them, or at least movies that contain them. Therefore, because this is content-based, by using this data we could provide recommendations that are more likely to have car chases. In addition to using the text, we can also use promotional images and stills from the movie. This is yet another route to hopefully understand what users like about a movie. We'd have to process the images first, through an image model to create some structure. For instance, perhaps a user likes movies that happen to have images with action scenes and another user likes movies that have a lot of images of space scenes, we can use these to recommend more of the same, but this time based on images attached to the movies. Why do just text and image, when the great thing about movies is they are quite literally video, which we can use in a content-based model? Conveniently, most movies these days have multiple trailers, teaser trailers, and commercials attached to them. We can extract the audio, frames, and video level information and use that to compare across other movies to recommend similar ones to users. Perhaps, the audio of movies a user likes contains a lot of laughing, so maybe they enjoy comedies, or maybe there's a lot of screaming and running, so they enjoy horror. The same can be done with a video of chase scenes, long dialogue scenes, nature scenes, hospital scenes, et cetera. Lastly, for content-base, we might have thought about using professional reviews, posted on the movies web page. These, unlike the professional ratings, are unstructured and first need to have natural language processing applied to create some structure, then we can use these in our content-based model. Remember, as with the professional ratings, these reviews are not written by users, so this is not collaborative filtering. Furthermore, users who like certain movies could agree or disagree with professional reviews and because it's content-based, they will be recommended more the same in that dimension. Of course, we could have thought of many more places of data we could use, like language of the movie, et cetera. This is enough for now, for content-based recommendation systems.