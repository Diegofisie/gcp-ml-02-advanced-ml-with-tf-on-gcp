Lastly, we can use knowledge based recommendation systems to help find our users the best movies. Remember, to be mindful of privacy concerns because this is user data that we're talking about here. Let's take a moment to think of what user-centric data sets we could get from, our movie website, that would help us make a great knowledge based recommendation system. Now, let's take a moment to think about what data sets we could use for knowledge recommendations, and then we'll see what ideas we came up with. All right, let's see some of the ideas we came up with. The most obvious user data we could use for our knowledge based recommendation system is probably demographic information. Simple things like age, gender et cetera. Basically, any dimensions that could possibly have enough variance to differentiate users from each other so that we don't just recommend the same movies to everyone. What point of the model is that? These are probably be restructured and bucketed into categories, for example, people with a very young age, in other words children, probably enjoy watching what other children watch, and that's something that an adult might like. There may be exceptions to these patterns but that is just what happens in machine learning. We need to be careful though, that we aren't stereotyping and always recommending certain movies with certain demographics, including other data dimension should help balance this out, especially if demographics aren't very predictive and the other features are. Another possible dataset that we could use for a knowledge based recommendation systems, is user locations, countries or languages. This can be important for localization. We can also use languages of feature because if a user doesn't speak Spanish, they may not enjoy watching Spanish movie, even if it has subtitles. But as with all machine learning, we need to be mindful that we don't go too far. Perhaps someone who speaks English and lives in United States, learned French at university and really enjoys French movies. Therefore, it's always a good idea to have other features and let the model learn what features are important, and which ones aren't, and to balance itself out of such situations. Another possibly great feature we could use to try to improve our knowledge based recommendation system is user entered genre preferences. This way we know what users feel are important to them, genre wise, and we can use that to recommend the genres they have listed as their favorite. Because this is knowledge based only for now, they will only get movies of the genres they have listed. But if paired with collaborative filtering, they might receive some more serendipitous recommendations. Furthermore, building off of that, global filters set by users could be used as another data set for our knowledge based recommendation system. These somewhat take the genre preferences a step further. Because when we choose to filter things out, we are choosing for some things to remain. For instance, beyond just wanting only certain genres and photographed the others, we can apply other user chosen filters such as, they only want movies with an average rating of four or higher, or movies that have been nominated or have won in Academy Award. This is essentially just keyword logic to apply these filters. But they do do the job, because you won't be recommended what you filtered out. As for unstructured data, a website may have an About Me page, for users to enter free text about themselves and their interest in movies. We can apply natural language processing to this text, and then compare those word embeddings against others users word embeddings. However, there could be sparsely problems if not enough users fill out their About Me page. So, we've gone through over 20 possible datasets using the three broad forms recommendation systems. We went over some of the possible issues that could arise if we were only looking at each data sets model independently. Fortunately, these issues tend to go away if in constant with other datasets using the other types of recommendation systems. This leads us to the hybrid model. You can think of each independent data set model as being a feature to our hybrid model connected via a deep neural network. It can take the embeddings from collaborative filters and combine them with content information, and knowledge about the user. Deep learning for product recommendations is a great way to build upon a traditional stand alone recommendation system. There are no new concepts that need to be learned or to implement. We can just use the building blocks we already made, it's just a structured data model which we have had a lot of practice working with already. As we saw from the design lab, there's a lot of data to bring together. This is a good thing, because the data is the fuel for machine learning. The more ways we can figure out to take advantage of it, the more likely you will have a powerful final model. Therefore, you will need multiple machine-learning models tied together in machinery pipeline to make the greatest impact. Let's now test our knowledge about hybrid recommendation systems. What is important to have when making a hybrid recommendation system? Creating your data collection with recommendation systems in mind, having made different datasets from different sources, having more than one recommendation model type, having a machine-learning model pipeline or all of the above. The correct answer is E. Hybrid recommendation systems work best when they have a lot of data from multiple sources. This includes user-entered data, data entered by multiple product extracts for items and user item interaction data. Therefore, it is important in designing a website, servers et cetera, that you keep all this in mind so that when you have the data available when creating your recommendation system. This is a lot better than making a recommendation system and not having the data ready to make it come to life. It's also important to have more than one recommendation model type. Each type comes with its own pros and cons and by using a combination of them, you can eliminate or at least mitigate most of the cons. These multiple models being fed by multiple data sources should be arranged into a machine learning model pipeline, that uses a deep neural network to combine them in the best way to give great recommendations.