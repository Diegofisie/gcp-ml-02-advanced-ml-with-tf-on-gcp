To get started, let's consider a thought exercise. Suppose you want to build an application to suggest homes for people who want to rent a vacation home, you have a database of users and properties and information about users past rentals, various property details, and the users respective ratings. We can represent this information in a matrix like the one here called a user-item interaction matrix. Each row corresponds to a user. Users could be customers, visitors, app users, or readers. Here we just have five, but we could have millions or even billions of users. This user has rated three of the houses in our database. Each column corresponds to an item. Items could be products, movies, events, articles. We can have thousands. In this case, items or properties for rent. This item has been rated by three separate users. In general, if user i has a rating for house j, then we have a score or a checkmark in the ij eighth spot. Take a few minutes and think about how you would go about selecting a vacation rental to recommend to a user. What features will you use? What target or label will you try to predict? Where will your data come from? Try to be as thorough as possible. What did you come up with? What features do you think would be relevant? Did you think about ways to use properties of the user? If so, what features did you use to describe your users? Did you consider using properties of the house? What features did you use to categorize the houses? Maybe you thought to consider a user's previous rentals or to consider the previous renters of a given house. Would it be useful to compare similar users behavior to find new recommendations? Or to suggest similar properties that a user might like? What does it mean for two users to be similar? What does it mean for two properties to be similar? How to even measure similarity for things like this? What are you trying to model? That is, what label did you think to use? Did you try to predict the user's rating score for a new property? Or perhaps, you want to simply predict what house they would book next. Different techniques of recommendation engines approach these questions in different ways, and we will briefly introduce a few of these approaches here. We'll start with two of the most popular types of recommendation engines; content-based and Collaborative Filtering. We'll also briefly discuss knowledge-based recommenders and introduce how deep learning can be used in building our recommendation engine. Discussing along the way some of the common pain points that arise.