Pick a personalization need for your company, and design a recommendation system around it. Think about what data you would need? What are your features and targets? How will you create a content-based filter, or collaborative filter? Do you have explicit ratings of user feedback you can use? Or will you have to allow an implicit feedback? If so, what implicit feedback is available? How will you address the causal problem? Could you benefit from a hybrid approach? Let's end this module with a quiz. Which of the following are good reasons to build and use a recommendation engine? There could be more than one right answer. That's right. Even though the math behind recommender systems is really cool, that's not a good enough reason alone to develop one. Some good reasons are that they personalize the user's experience, or that recommenders provide a way to surface relevant content within millions of items. Like recommending YouTube videos, you might never have found yourself. In summary, we've had a brief introduction to the different types of commonly used recommender systems. We've discussed the difference between content-based and collaborative filtering. We've seen how a knowledge based approach can be used, and we've seen how deep neural networks can be applied in this setting as well. We discussed how to design and build your own recommendation engine, and we've seen some of the problems that can arise, either cold-start problem, or lack of explicit user feedback. We've also discussed ways in which these problems can be addressed. In the next modules, we will go deeper into the details of how these recommender systems work, and even see how to build them in TensorFlow.