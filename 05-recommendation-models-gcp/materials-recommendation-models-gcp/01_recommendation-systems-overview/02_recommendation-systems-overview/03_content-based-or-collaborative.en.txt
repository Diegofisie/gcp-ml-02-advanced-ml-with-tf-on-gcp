A Content-based method uses attributes of the items to recommend new items to a user. It doesn't take into account the behavior or ratings of other users. For example, if a user has rented and liked a lot of vacation homes on the beach, this method will suggest other similar homes that are also on the beach. This is often done by hand engineering features for the items and learning how much a single user aligns with each of those features. Using that feature representation of the user is impossible to extrapolate how a given user would rank unseen items. A collaborative filtering model works with the entire user item interaction matrix. They consider all users, all items, and all user item ratings. Loosely speaking, they work with the idea that similar users will like similar items. That is, they use similarities between the users and the items simultaneously to provide recommendations. This can allow for seemingly serendipitous recommendations. Meaning, they can recommend an item to a user A based only on the interests of a similar user B. Another useful advantage is that the feature representations can be learned automatically. So, you don't have to rely on hand engineering specific features as you would for a content-based filtering method. This process often involves matrix factorization and behaves similarly to a Content-basec approach, but does not rely on previously constructed features. Knowledge-based recommender systems are based on explicit knowledge about the user's preferences, items, and or recommendation criteria. They're especially useful when alternative approaches such as collaborative filtering or content-based methods cannot be applied. This occurs in situations where items are not purchased very often. For example, if instead of renting a vacation house, suppose we want to build a recommendation engine for buying a vacation house. Because most people don't buy houses often, we probably wouldn't have enough previous house buying information to use either a content-based or collaborative filtering approach. In this scenario, knowledge-based systems will often explicitly ask users for their preferences, and then use that information to begin making recommendations. Often, there is value in combining different types of recommendation models into a single hybrid approach. This can be done in several ways. For example, we could develop a few recommenders and then use one or the other depending on the scenario. If a user has already rated a large number of items, perhaps we can rely on a content-based method. However, if the user has rated only a few items, we may instead prefer to use a collaborative filtering approach. This way, we can fully leverage the information we have about other users and their interactions with items in our database, to gain some insight into what we can recommend. Of course, if we have no information about a user's previous item interactions or we like any information about a given user, we may instead want to rely on a knowledge-based approach, and ask the user directly for their preferences via a survey before making recommendations. Another way to create a hybrid model is to simply combine the outcomes of more than one of these models. The multiple outcomes could then form the input to a more sophisticated model that makes the final recommendation that we then serve to the user. The idea is that the more sophisticated model, we'll learn a more nuanced relationship between the query and the various model outcomes, and we'll have a much better recommendation. In fact, some research suggests that a hybrid approach combining multiple outcomes like this, can provide more accurate recommendations in a single approach on its own. In addition to content-based, collaborative filtering and knowledge-based approaches, deep learning models can also be used when building a recommendation system. Deep neural networks work well because they are flexible and can be trained to have varying outcomes, such as predicting ratings, interactions, or even next items. For example, suppose we wanted to recommend videos to our users, we could approach this from a deep learning point of view by taking attributes of the user's behavior input, for example, a sequence of their previously watched videos embedded into some latent space, combined with video attributes, either genre or artists information for a given video. These user and item attributes are combined into a single dense layer of a neural network, and then again to another fully-connected layer until a single value is ultimately produced, with the objective function comparing the difference with the users rating for the given video. At inference time, we can apply this model to rate previously unseen videos and recommend to the user the video with the highest score. Deep learning models like this are flexible enough to easily incorporate all kinds of query features and item features into the input layer of the network to help capture the specific interests of a user or to improve the relevance of the recommendations. Let's do a quick quiz. Suppose we have built a recommendation engine, suggest new Apps from our App store. Our model recommends a Hiking App to a user because they recently installed a running App and I have been using it a lot. What kind of recommendation approach is this an example of? Would it be content-based filtering, collaborative filtering, a deep neural network approach or perhaps a hybrid or more than one of these? That's right. This would be an example of content-based filtering. We're told that the Hiking App suggestion is a result of the user recently installing and using a similar App for tracking their runs. Because the content of these two Apps is similar, we expect that this user will appreciate both, hence the name content-based filtering. This wouldn't be collaborative filtering because the recommendation does not rely on the behaviors and item interactions of other users. Its recommendation is based only on that user's previous behavior. This is what sets content-based filtering apart from collaborative filtering. And although it's possible that this recommendation came from a neural network or a hybrid approach, it doesn't sound like it from the question. The recommendation was made based on the similarity of features and content of the two Apps. In fact, the features that related to Apps and the user are likely hand engineered by some software engineer, and they aren't learnt solely for the data. We'll see more about how this works in the coming modules.