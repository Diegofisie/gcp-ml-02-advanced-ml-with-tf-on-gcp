In the last module, we mentioned a few common types of recommendation systems. In this module, we'll go a bit deeper in exploring how content-based recommendation engines work. Content-based filtering methods use item features to recommend new items that are similar to the user has already liked, based on their previous actions or explicit feedback. They don't rely on information about other users or other user item interactions. For example, consider the following scenario. We have a user who has seen and rated a few movies. Some she liked and gave it a thumbs up and some she didn't. We would like to know which movie in our database to recommend next. Which of the remaining unrated unseen movies should we recommend to this user? Based on the ratings we currently have, which of the remaining unrated movies should we recommend to this user? The Dark Knight Rises, The Incredibles, or Bleu? That's right. We would likely want to recommend The Incredibles. Given a list of all movies in the corpus, if one movie is similar to another movie that the user ranked highly, then we'll recommend that one. We don't have a lot of information to base our recommendation on here. But this user seems to enjoy cartoon movies and not any of the others. Based on the positive rating, this user gave to Shrek and the similarity between Shrek and The Incredibles. Perhaps, we should recommend The Incredibles to watch next. In this module, we'll learn how to measure the similarity of pairs of elements in an embedding space. We'll discuss the mechanics of content-based recommendation systems and really see how they work. We'll see how to build our own content-based recommendation systems. One to recommend movies and one to recommend articles.